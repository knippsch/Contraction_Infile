################################################################################
#
# Makefile to compile and link C programs with MPI subroutines
#
# Version valid for Linux machines with MPICH
#
# "make" compiles and links the specified main programs and modules,
# using the specified libraries (if any), and produces the executables
#
# "make clean" removes all files generated by "make"
#
# Dependencies on included files are automatically taken care of
#
################################################################################

all: rmxeq mkdep mkxeq
.PHONY: all

# main programs and modules to be compiled

MAIN = Infile

GENERAL = GlobalData 

MODULES = $(GENERAL)

# search path for modules
MDIR = ../modules
VPATH = .:$(MDIR)

# Logging option (-mpilog or -mpitrace or -mpianim)
LOGOPTION =

LIMEPATH = /home/knippsch/ExternLibraries/lime-1.3.2

# additional include directories
INCPATH = /home/knippsch/ExternLibraries/eigen-3.2.1 \
          /home/knippsch/ExternLibraries/boost_1_55_0 \
          $(LIMEPATH)/include/ ../include 

# additional libraries

LIBS = lime boost_program_options

LIBPATH = $(LIMEPATH)/lib  /usr/local/lib /home/knippsch/ExternLibraries/boost_1_55_0/stage/lib/


# scheduling and optimization options
CFLAGS = -g -Wall -pedantic -std=c++11 -O2 -march=native -Wno-unused-variable \
         -Wno-unused-local-typedefs -Wno-sign-compare -fopenmp  

############################## do not change ###################################

SHELL=/bin/bash
CC=g++
CLINKER=$(CC)

PGMS= $(MAIN) $(MODULES)

-include $(addsuffix .d,$(PGMS))


# rule to make dependencies

$(addsuffix .d,$(PGMS)): %.d: %.cpp Makefile
	@ $(CC) -ansi $< -MM $(addprefix -I,$(INCPATH)) -o $@ $(CFLAGS)


# rule to compile source programs

$(addsuffix .o,$(PGMS)): %.o: %.cpp Makefile
	$(CC) $< -c $(CFLAGS) $(LOGOPTION) $(addprefix -I,$(INCPATH)) -static


# rule to link object files

$(MAIN): %: %.o $(addsuffix .o,$(MODULES)) Makefile
	$(CLINKER) $< $(addsuffix .o,$(MODULES)) $(CFLAGS) $(LOGOPTION) \
	   $(addprefix -L,$(LIBPATH)) $(addprefix -l,$(LIBS)) -lm -o $@ -static

# produce executables

mkxeq: $(MAIN)


# remove old executables

rmxeq:
	@ -rm -f $(MAIN); \
        echo "delete old executables"


# make dependencies

mkdep:  $(addsuffix .d,$(PGMS))
	@ echo "generate tables of dependencies"


# clean directory

clean:
	@ -rm -rf *.d *.o *.alog *.clog *.slog $(MAIN)
.PHONY: clean

################################################################################
